Лебедев Петр Андреевич, БПИ217

10. Разработать программу, которая меняет на обратный порядок следования
 символов каждого слова в ASCII-строке символов. Порядок слов остается неизменным. 
Слова состоят только из букв. Разделителями слов являются все прочие символы.


Разработал программы на 9 баллов.

 Для запуска программ на 4-7 баллов формат запуска: ./prog4.out input.txt output.txt
 Для запуска программ на 8-9 баллов формат запуска: 
	В одном окне: ./prog8-file.out input.txt output.txt
	В другом окне: ./prog8-changer.out
	Порядок вроде бы не важен, но если что лучше запускать как написал
Тестовый набор(и выходной тоже) представлен в папке tests у каждой программы отдельно. 
Входные файлы(мои тесты) одинаковы для всех программ.

Схемы решаемой задачи:
4:
1(считывает и передает в первый канал данные из файла)
	-2(ребенок первого, считывает из первого канала данные, обрабатывает согласно заданию и передает во второй канал)
		-3(ребенок второго, считывает из второго канала данные, записывает их в файл вывода)

5:
1(считывает и передает в первый канал("pipe1.fifo") данные из файла)
	-2(ребенок первого, считывает из первого канала("pipe1.fifo") данные, обрабатывает согласно заданию и передает во второй канал("pipe2.fifo"))
		-3(ребенок второго, считывает из второго канала("pipe2.fifo") данные, записывает их в файл вывода)

6:
1(считывает и передает в первый канал данные из файла)
	-2(ребенок первого, считывает из первого канала данные, обрабатывает согласно заданию и передает во второй канал)
1(read(второй_канал) ждет пока туда что то запишут, поэтому процесс висит, пока его ребенок(2-ой процесс)
 не запишет что то во второй_канал, считывает из второго канала данные, записывает их в файл вывода)

7:
1(считывает и передает в первый канал("pipe1.fifo") данные из файла)
	-2(ребенок первого, считывает из первого канала("pipe1.fifo") данные, обрабатывает согласно заданию и передает во второй канал("pipe2.fifo"))
1(read(второй_канал("pipe2.fifo")) ждет пока туда что то запишут, поэтому процесс висит, 
пока его ребенок(2-ой процесс) не запишет что то во второй_канал("pipe2.fifo"), 
считывает из второго канала("pipe2.fifo") данные, записывает их в файл вывода)

8:
1(считывает и передает в первый канал("pipe1.fifo") данные из файла)
2(НЕЗАВИСИМЫЙ от первого(запускается из отдельного окна терминала), считывает из первого канала("pipe1.fifo") данные, 
обрабатывает согласно заданию и передает во второй канал("pipe2.fifo"))
1(read(второй_канал("pipe2.fifo")) ждет пока туда что то запишут, поэтому процесс висит, 
пока его ребенок(2-ой процесс) не запишет что то во второй_канал("pipe2.fifo"), считывает из второго канала("pipe2.fifo") данные, записывает их в файл вывода)
пояснение: именованный канал для чтения/записи зависает на открытии пока не будет открыт противоположный канал(запись/чтение), 
поэтому программы в теории(и у меня на практике) должны запускаться в любом порядке

9:
делать:
1(считывает и передает в первый канал("pipe1.fifo") данные из файла размером в 20 символов)
2(НЕЗАВИСИМЫЙ от первого(запускается из отдельного окна терминала), считывает из первого канала("pipe1.fifo") данные размером в 20 символов, 
записывает эти символы в общий массив.
пока массив, полученный из файла(он же массив, отправленный в первый канал, он же массив, считанный из второго канала)
по размеру равен размеру буфера(20-ти символам)
Далее:
2 обрабатывает согласно заданию и передает во второй канал("pipe2.fifo"))

1(read(второй_канал("pipe2.fifo")) ждет пока туда что то запишут, поэтому процесс висит, 
пока его ребенок(2-ой процесс) не запишет что то во второй_канал("pipe2.fifo"), 
считывает из второго канала("pipe2.fifo") данные, записывает их в файл вывода)
Пояснение: Мы сохраняем весь текст в 1 массив и передаем его целиком во второй канал тк в задании требуется
перевернуть СЛОВО, мой алгоритм подразумевает что ему поступит слово целиком. Если передавать по 20-ть символов
то велика вероятность того, что слово поступит обрезанным, как тут: Преподавать : Преп одавать : перПьтавадо
Я также закомментировал вывод, который докажет что все передается по маленькому буферу. 
